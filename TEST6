import time
import pymssql
import subprocess
from datetime import datetime
import pytz

# SQL connection config
sql_config = {
    'server': 'AM',
    'user': '123',
    'password': 'ep',
}

# Email configuration (update according to your requirements)
email_config = {
    'sender': 'your_email@example.com',
    'recipient': ['recipient1@example.com', 'recipient2@example.com'],
}

# To hold logs for sending
logs = []

def log_message(message):
    """Helper function to log messages with a timestamp."""
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_entry = f"<p>[{timestamp}] {message}</p>"
    logs.append(log_entry)  # Store log in HTML format
    print(f"[{timestamp}] {message}")

def send_log_email(sender, recipients, log_content):
    """Send the log content via email using a specified method."""
    # Replace this with your email sending logic
    email_body = f"<html><body>{log_content}</body></html>"
    
    # Example of sending logic (replace this with actual email logic)
    print("Sending email...")
    print(f"From: {sender}")
    print(f"To: {', '.join(recipients)}")
    print(f"Content:\n{email_body}")
    # Implement your email sending mechanism here

def execute_command_with_timeout(command, timeout_minutes):
    """Executes a shell command with a specified timeout. Returns result, start time, and end time."""
    log_message(f"Executing command: {command} with a timeout of {timeout_minutes} minutes.")
    
    # Log the start time
    start = time.time()
    start_dt = datetime.fromtimestamp(start).strftime('%Y-%m-%d %H:%M:%S')
    log_message(f"Command Start Time: {start_dt}")

    # Start the command and stream output in real time
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True, text=True)

    # Capture output and monitor for timeout
    try:
        output = []
        start_time = datetime.now()
        for line in iter(process.stdout.readline, ''):
            print(line, end='')  # Print the command's output line by line
            output.append(line)

            # Check if the command has exceeded the timeout
            if (datetime.now() - start_time).total_seconds() > timeout_minutes * 60:
                log_message(f"Command timeout reached after {timeout_minutes} minutes. Terminating command.")
                process.terminate()
                return -1, start, time.time()
        
        process.stdout.close()
        returncode = process.wait()

        # Log the end time
        end = time.time()
        end_dt = datetime.fromtimestamp(end).strftime('%Y-%m-%d %H:%M:%S')
        total_time = end - start
        log_message(f"Command End Time: {end_dt}")
        log_message(f"Total Time Taken: {total_time:.2f} seconds")

        return returncode, start, end

    except subprocess.TimeoutExpired:
        log_message(f"Command {command} exceeded the timeout of {timeout_minutes} minutes and was terminated.")
        process.terminate()
        return -1, start, time.time()

def check_db_connection(connection):
    """Checks if the database connection is successful."""
    try:
        cursor = connection.cursor()
        cursor.execute("SELECT 1")
        cursor.close()
        log_message("Database connection successful.")
        return True
    except Exception as e:
        log_message(f"Failed to connect to database: {e}")
        return False

def check_db_query(connection, query, start_time, end_time):
    """Executes a SQL query with start and end time parameters and logs the output."""
    cursor = connection.cursor()

    # Log the start time of the SQL query
    log_message(f"Executing SQL query between {start_time} and {end_time}: {query}")
    start_query_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_message(f"SQL Query Start Time: {start_query_time}")

    # Execute the query with the injected start and end times
    cursor.execute(query, (start_time, end_time))
    connection.commit()
    results = cursor.fetchall()

    # Log the end time of the SQL query
    end_query_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_message(f"SQL Query End Time: {end_query_time}")

    cursor.close()

    # Display query results
    log_message(f"SQL Query Results: {results}")
    return results

def convert_time_to_gmt(timestamp):
    """Converts a UNIX timestamp to GMT timezone."""
    gmt_timezone = pytz.timezone('GMT')
    return datetime.fromtimestamp(timestamp, tz=pytz.utc).astimezone(gmt_timezone).strftime('%Y-%m-%d %H:%M:%S')

def convert_time_to_ist(timestamp):
    """Converts a UNIX timestamp to IST timezone."""
    ist_timezone = pytz.timezone('Asia/Kolkata')
    return datetime.fromtimestamp(timestamp, tz=pytz.utc).astimezone(ist_timezone).strftime('%Y-%m-%d %H:%M:%S')

def main(commands_queries):
    """Executes commands one by one, checks for errors, and runs the corresponding SQL queries if successful."""
    connection = pymssql.connect(**sql_config)
    
    # Check database connection
    if not check_db_connection(connection):
        log_message("Exiting due to failed DB connection.")
        return

    for cmd_key, cmd_info in commands_queries.items():
        cmd = cmd_info['command']
        queries = cmd_info['queries']
        timeout_minutes = cmd_info['timeout']

        # Execute the command with the specified timeout
        success, start_time, end_time = execute_command_with_timeout(cmd, timeout_minutes)

        if success == 0:
            log_message(f"\n{cmd_key} executed successfully.")

            # Convert start and end times
            if cmd_key in ['cmd1', 'cmd3']:  # cmd1 and cmd3 use IST
                start_time_dt = convert_time_to_ist(start_time)
                end_time_dt = convert_time_to_ist(end_time)
            else:  # cmd2 uses GMT
                start_time_dt = convert_time_to_gmt(start_time)
                end_time_dt = convert_time_to_gmt(end_time)

            # Execute corresponding SQL queries if the command was successful
            for query in queries:
                log_message(f"Injecting command start ({start_time_dt}) and end ({end_time_dt}) times into the SQL query.")
                
                check_db_query(connection, query, start_time_dt, end_time_dt)
        else:
            log_message(f"\nCommand {cmd_key} failed or timed out. Moving to next command.")
            break

    # Send logs at the end
    send_log_email(email_config['sender'], email_config['recipient'], ''.join(logs))

    connection.close()

# Key-value pair for commands, associated queries, and timeout in minutes
commands_queries = {
    'cmd1': {
        'command': r'C:\Temp\arrr.exe userhanenankatkan',
        'queries': [
            "SELECT * FROM ID, REQUESTSTATUS WHERE FEEDNAME='TRADESERVICEPHOENIXCASH' AND DATEREQUESTED BETWEEN %s AND %s"
        ],
        'timeout': 15  # 15 minutes timeout for cmd1
    },
    'cmd2': {
        'command': r'C:\Temp\egujb.exe -userkane-ankita',
        'queries': [
            "SELECT COUNT(*) FROM ID, REQUESTSTATUS WHERE FEEDNAME='MATAHOMS' AND CREATEDDATE BETWEEN %s AND %s"
        ],
        'timeout': 30  # 30 minutes timeout for cmd2
    },
    'cmd3': {
        'command': r'C:\Temp\third_command.exe -otherflags',
        'queries': [
            "SELECT * FROM ANOTHER_TABLE WHERE FEEDNAME='EXAMPLE' AND CREATEDDATE BETWEEN %s AND %s"
        ],
        'timeout': 240  # 4 hours (240 minutes) timeout for cmd3
    }
}

# Run the main function with commands and queries as key-value pairs
main(commands_queries)
