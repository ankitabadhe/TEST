import time
import pymssql
import subprocess
from datetime import datetime
import pytz

# SQL connection config
sql_config = {
    'server': 'AM',
    'user': '123',
    'password': 'ep',
}

def log_message(message):
    """Helper function to log messages with timestamp."""
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f"[{timestamp}] {message}")

def execute_command(command):
    """Executes a shell command and returns the result, start time, and end time."""
    log_message(f"Executing command: {command}")
    
    # Log the start time
    start = time.time()
    start_dt = datetime.fromtimestamp(start).strftime('%Y-%m-%d %H:%M:%S')
    log_message(f"Command Start Time: {start_dt}")

    # Start the command and stream output in real time
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True, text=True)
    
    # Capture output as it happens
    for line in iter(process.stdout.readline, ''):
        print(line, end='')  # Print the command's output line by line

    process.stdout.close()
    returncode = process.wait()

    # Log the end time
    end = time.time()
    end_dt = datetime.fromtimestamp(end).strftime('%Y-%m-%d %H:%M:%S')
    total_time = end - start
    log_message(f"Command End Time: {end_dt}")
    log_message(f"Total Time Taken: {total_time:.2f} seconds")

    return returncode, start, end

def check_db_connection(connection):
    """Checks if the database connection is successful."""
    try:
        cursor = connection.cursor()
        cursor.execute("SELECT 1")
        cursor.close()
        log_message("Database connection successful.")
        return True
    except Exception as e:
        log_message(f"Failed to connect to database: {e}")
        return False

def check_db_query(connection, query, start_time, end_time):
    """Executes a SQL query with start and end time parameters and logs the output."""
    cursor = connection.cursor()

    # Log the start time of the SQL query
    log_message(f"Executing SQL query between {start_time} and {end_time}: {query}")
    start_query_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_message(f"SQL Query Start Time: {start_query_time}")

    cursor.execute(query, (start_time, end_time))
    connection.commit()
    results = cursor.fetchall()

    # Log the end time of the SQL query
    end_query_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_message(f"SQL Query End Time: {end_query_time}")

    cursor.close()

    # Display query results
    log_message(f"SQL Query Results: {results}")
    return results

def convert_time_to_gmt(timestamp):
    """Converts a UNIX timestamp to GMT timezone."""
    gmt_timezone = pytz.timezone('GMT')
    return datetime.fromtimestamp(timestamp, tz=pytz.utc).astimezone(gmt_timezone).strftime('%Y-%m-%d %H:%M:%S')

def main(commands_queries):
    """Executes commands one by one, checks for errors, and runs the corresponding SQL queries if successful."""
    connection = pymssql.connect(**sql_config)
    
    # Check database connection
    if not check_db_connection(connection):
        log_message("Exiting due to failed DB connection.")
        return

    for cmd_key, cmd_info in commands_queries.items():
        cmd = cmd_info['command']
        queries = cmd_info['queries']

        # Execute the command and capture the exit status
        success, start_time, end_time = execute_command(cmd)

        if success == 0:
            log_message(f"\n{cmd_key} executed successfully.")

            # Convert start and end times
            start_time_dt = datetime.fromtimestamp(start_time).strftime('%Y-%m-%d %H:%M:%S')
            end_time_dt = datetime.fromtimestamp(end_time).strftime('%Y-%m-%d %H:%M:%S')

            start_time_gmt = convert_time_to_gmt(start_time)
            end_time_gmt = convert_time_to_gmt(end_time)

            # Execute corresponding SQL queries if the command was successful
            for query in queries:
                log_message(f"Injecting command start ({start_time_dt}) and end ({end_time_dt}) times into the SQL query.")
                
                if cmd_key == 'cmd1':
                    check_db_query(connection, query, start_time_gmt, end_time_gmt)
                else:
                    check_db_query(connection, query, start_time_dt, end_time_dt)
        else:
            log_message(f"\nCommand {cmd_key} failed with exit code {success}. Skipping further execution.")
            break

    connection.close()

# Key-value pair for commands and associated queries
commands_queries = {
    'cmd1': {
        'command': r'C:\Temp\arrr.exe userhanenankatkan',
        'queries': [
            "SELECT * FROM ID, REQUESTSTATUS WHERE FEEDNAME='TRADESERVICEPHOENIXCASH' AND DATEREQUESTED BETWEEN %s AND %s"
        ]
    },
    'cmd2': {
        'command': r'C:\Temp\egujb.exe -userkane-ankita',
        'queries': [
            "SELECT COUNT(*) FROM ID, REQUESTSTATUS WHERE FEEDNAME='MATAHOMS' AND CREATEDDATE BETWEEN '2021-09-14 01:28:00' AND '2021-09-14 01:40:00'"
        ]
    },
    'cmd3': {
        'command': r'C:\Temp\third_command.exe -otherflags',
        'queries': [
            "SELECT * FROM ANOTHER_TABLE WHERE FEEDNAME='EXAMPLE' AND CREATEDDATE BETWEEN %s AND %s"
        ]
    }
}

# Run the main function with commands and queries as key-value pairs
main(commands_queries)
